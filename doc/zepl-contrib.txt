*zepl-contrib.txt*               Community contributed extensions for zepl.vim.


                           Zepl.vim Extension Manual~


Welcome to the Zepl community contributed extension manual.  *zepl-contrib*

This is the home of various potentially useful user contributed extensions for
Zepl.  Nothing here is enabled by default; individual extensions can be
enabled as desired.  Documentation for each extension can be found in this
help doc.

If you have created some useful extensions for Zepl and think that others
might also find them useful, please create a pull request.

Note: No guarantees are made as to the stability of these extensions.

    1. Rationale .................................. |zepl-contrib-rationale|
    2. Language-specific .......................... |zepl-languages|
    3. Extra features ............................. |zepl-extra-features|

Don't forget to check out the main |zepl.txt| manual.

==============================================================================
 1. RATIONALE                                          *zepl-contrib-rationale*

My goal is to keep the Zepl core as minimal and bug-free as possible, this
means that it cannot include language-specific code or many potentially useful
features.  To resolve this issue I designed Zepl with extensibility in mind,
and created this contrib system.

The extensibility of Zepl makes it possible to add many desired features and
add support for any language, even those with unusual syntax (e.g. Python:
|zepl-python|).  The contrib system makes it possible to ship these with Zepl.

==============================================================================
 2. LANGUAGE-SPECIFIC ENHANCEMENTS                             *zepl-languages*

Language-specific enhancements for Zepl.

    * Python  |zepl-python|
    * F#      |zepl-fsharp|

------------------------------------------------------------------------------
                                                                  *zepl-python*

Copy/adapt the code below to your |vimrc| to add improved Python support.
>
    runtime zepl/contrib/python.vim

    autocmd! FileType python let b:repl_config = {
                \   'cmd': 'python',
                \   'formatter': function('zepl#contrib#python#formatter')
                \ }
<
------------------------------------------------------------------------------
                                                                  *zepl-fsharp*

Copy/adapt the code below to your |vimrc| to add improved F# support.
>
    runtime zepl/contrib/fsharp.vim

    autocmd! FileType fsharp let b:repl_config = {
                \   'cmd': 'dotnet fsi',
                \   'formatter': function('zepl#contrib#fsharp#formatter')
                \ }
<
------------------------------------------------------------------------------
                                                                 *zepl-clojure*

Copy/adapt the code below to your |vimrc| to add improved Clojure support.
>
    runtime zepl/contrib/clojure.vim

    autocmd! FileType clojure let b:repl_config = {
                \   'cmd': filereadable('deps.edn') ? 'clj' : 'lein repl',
                \   'formatter': function('zepl#contrib#clojure#formatter')
                \ }
<
==============================================================================
 3. EXTRA FEATURES                                        *zepl-extra-features*

Extra features for Zepl.

    * Load files                    |zepl-load_files|
    * Send control characters       |zepl-control_characters|
    * Send delimited block to REPL  |zepl-blocks|
    * Neovim autoscroll hack        |zepl-nvim_autoscroll_hack|

------------------------------------------------------------------------------
                                          *zepl-load_files*  *:ReplLoadFile*  *gz.*

Running `gggzG` to load the entire file into the REPL isn't great as it'll
just fill the screen and history with junk.  Luckily many REPLs and languages
provide features to cleanly load a file into the environment.  This Zepl
extension makes it easier to use these features.

Add the following code snippet to your |vimrc| to enable this extension.
>
    runtime zepl/contrib/load_files.vim
<
By using the `load_file` key in 'b:repl_config' or 'g:repl_config', you can
specify a command for zepl to insert the file name into, and then send to the
REPL.  The command uses `%s` in place of the file name (see: |printf()|).

Examples:
>
    autocmd FileType javascript let b:repl_config = {
            \   'cmd': 'node',
            \   'load_file': '.load "%s"'
            \ }

    autocmd FileType julia let b:repl_config = {
            \   'cmd': 'julia',
            \   'load_file': 'include("%s")'
            \ }

    autocmd FileType scheme let b:repl_config = {
            \   'cmd': 'rlwrap csi',
            \   'load_file': '(load "%s")'
            \ }
<
Once configured, you can type `gz.` in |Normal-mode| to send the current file.
This mapping can be disabled with 'g:zepl_default_maps' and rebound with the
*<Plug>ReplLoadFile* plug.

Alternatively, you can use the |:ReplLoadFile| command.  Any number of files
can be specified, but if none are, it'll load the current file.

Examples:
>
    :ReplLoadFile            " Load current file into REPL.
    :ReplLoadFile %          " Load current file into REPL.
    :ReplLoadFile a.py b.py  " Load files into REPL.
<
------------------------------------------------------------------------------
                                                      *zepl-control_characters*

You might want to be able to send characters to your REPL, such as newline,
Ctrl-C, Ctrl-D, or any others.

Add the following code snippet to your |vimrc| to enable this extension.
>
    runtime zepl/contrib/control_characters.vim
<
Two key combinations are provided. Press |gzc| and a key (combination) to
send the corresponding character to the terminal (e.g. |gzc<C-c>| sends
Ctrl-C). <Esc> cancels sending a character.

The default combination to switch to the window containing the REPL is
|gz<TAB>|.

Two |<Plug>| mappings are also provided:

  * |<Plug>ReplSendKey| listens for a key (combination) to send.
>
    nmap <silent> gzc <Plug>ReplSendKey
<
  * |<Plug>ReplFocus| moves the cursor to the window in the tab containing the
    REPL. If the REPL is not currently opened in a window, a new split window
    is created.
>
    nmap <silent> gz<TAB> <Plug>ReplFocus
<
Note: You will likely want to disable zepl.vim's default key bindings before
setting your own.  This can be done using 'g:zepl_default_maps'.

See also: |g:zepl_default_maps|.

------------------------------------------------------------------------------
                                           *zepl-blocks*  *ReplSendBlock*  *gz<CR>*
                                   *'g:zepl_block_delims'*  *<Plug>ReplSendBlock*

This contrib module adds the ability to send a code block marked by delimiters
to a the REPL.

Enable the contrib module with:
>
    runtime zepl/contrib/blocks.vim
<
Once enabled you need to configure the delimiters that mark a code block.
This is done by setting the 'block_delims' key in the 'b:repl_config'
dictionary (or 'g:repl_config') to a list containing |pattern|s for the start
and end delimiters respectively.

For example:
>
    let g:repl_config = {
            \   'javascript': {
            \     'cmd': 'node',
            \     'block_delims': ['^\s*#\s*start block\s*\zs$', '^\ze\s*#\s*end block\s*$']
            \   }
            \ }

This example configuration contains delimiters for JavaScript files that will
match the following:
>
    # start block
    function foo(bar) {
        console.log('Hello, ' + bar + '!');
    }
    # end block
<
The |ReplSendBlock| command will send the code block under the cursor to the
REPL.  By default this command is bound to `gz<CR>` (where <CR> is the
enter/return key).

(This mapping can be disabled with 'g:zepl_default_maps' and rebound with the
|<Plug>ReplSendBlock| plug.)

This contrib module will also check the 'g:zepl_block_delims' variable for
delimiters so that you can set global delimiters.

------------------------------------------------------------------------------
                                                    *zepl-nvim_autoscroll_hack*

Enable a hacky workaround to force Neovim's |:terminal| buffer to auto-scroll
after leaving |Terminal-mode|.
>
    runtime zepl/contrib/nvim_autoscroll_hack.vim
<
By default Neovim's |:terminal| buffer will only auto-scroll when the cursor is
on the last line of the buffer.  But when you start a new REPL, your cursor
probably won't be at the bottom, so the buffer won't auto-scroll.

This contrib module simply remaps <C-\><C-n> to also move the cursor to the
bottom of the buffer, which mostly alleviates the problem.

------------------------------------------------------------------------------
vim:et:ts=2:sts=2:sw=2:tw=78:ft=help:norl:
